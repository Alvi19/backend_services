definitions:
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  models.UserExample:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  models.UserIndex:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  reqresp.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  reqresp.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  reqresp.TokenResponse:
    properties:
      access_token:
        type: string
      message:
        type: string
      refresh_token:
        type: string
    type: object
info:
  contact:
    email: lifelinejar@gmail.com
    name: API Support
  description: 'FullStack Developer __(Client : KFC) Rest API.'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: 'FullStack Developer __(Client : KFC)'
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return tokens
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reqresp.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/reqresp.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/reqresp.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      description: Logout user by clearing the access token cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reqresp.SuccessResponse'
      summary: User logout
      tags:
      - auth
  /auth/profile:
    get:
      description: Retrieve user details from the access token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/reqresp.ErrorResponse'
      summary: Get user profile
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and return the created user data
      parameters:
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.UserExample'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/reqresp.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/reqresp.ErrorResponse'
      summary: User registration
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Filter by vendor ID
        in: query
        name: vendor_id
        type: integer
      - description: Filter by role ID
        in: query
        name: role_id
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by phone
        in: query
        name: phone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserIndex'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user record
      parameters:
      - description: User Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserExample'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a user record (update DeletedAt field)
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User deleted
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Delete user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by their unique ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated User Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserExample'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Update user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
